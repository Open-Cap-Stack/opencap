{
  "openapi": "3.0.0",
  "info": {
    "title": "OpenCap API Documentation",
    "version": "1.0.0",
    "description": "OpenCap Financial Management System",
    "license": {
      "name": "ISC",
      "url": "https://opensource.org/licenses/ISC"
    },
    "contact": {
      "name": "OpenCap Support",
      "url": "https://github.com/Open-Cap-Stack/opencap",
      "email": "support@opencap.com"
    }
  },
  "servers": [
    {
      "url": "/api",
      "description": "Default API server"
    },
    {
      "url": "/api/v1",
      "description": "Version 1 API server"
    }
  ],
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "stack": {
            "type": "string",
            "description": "Error stack trace (development only)"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "super_admin"
            ],
            "description": "User's role"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether the user's email has been verified"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "User last update timestamp"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Document unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Document name"
          },
          "type": {
            "type": "string",
            "enum": [
              "contract",
              "report",
              "legal",
              "tax",
              "other"
            ],
            "description": "Document type"
          },
          "description": {
            "type": "string",
            "description": "Document description"
          },
          "fileUrl": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the document file"
          },
          "fileSize": {
            "type": "integer",
            "description": "File size in bytes"
          },
          "fileType": {
            "type": "string",
            "description": "MIME type of the file"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags categorizing the document"
          },
          "entityId": {
            "type": "string",
            "description": "ID of the related entity"
          },
          "entityType": {
            "type": "string",
            "enum": [
              "company",
              "spv",
              "investor",
              "employee",
              "other"
            ],
            "description": "Type of the related entity"
          },
          "uploadedBy": {
            "type": "string",
            "description": "ID of the user who uploaded the document"
          },
          "hasEmbeddings": {
            "type": "boolean",
            "description": "Whether vector embeddings have been generated"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of records"
          },
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "description": "Number of records per page"
          },
          "pages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        }
      },
      "SPV": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "SPV unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the SPV"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Pending",
              "Closed"
            ],
            "description": "Operational status of the SPV"
          },
          "complianceStatus": {
            "type": "string",
            "enum": [
              "Compliant",
              "NonCompliant",
              "PendingReview"
            ],
            "description": "Regulatory compliance status"
          },
          "parentCompany": {
            "type": "string",
            "description": "ID of the parent company managing this SPV"
          },
          "formation": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Formation date of the SPV"
              },
              "state": {
                "type": "string",
                "description": "State where the SPV was formed"
              },
              "ein": {
                "type": "string",
                "description": "Employer Identification Number"
              }
            }
          },
          "fundingGoal": {
            "type": "number",
            "format": "float",
            "description": "Target funding amount"
          },
          "currentFunding": {
            "type": "number",
            "format": "float",
            "description": "Current amount raised"
          },
          "investors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of investors in this SPV"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of assets owned by this SPV"
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of documents related to this SPV"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "SPVInput": {
        "type": "object",
        "required": [
          "name",
          "status",
          "complianceStatus",
          "parentCompany"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the SPV"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Pending",
              "Closed"
            ],
            "description": "Operational status of the SPV"
          },
          "complianceStatus": {
            "type": "string",
            "enum": [
              "Compliant",
              "NonCompliant",
              "PendingReview"
            ],
            "description": "Regulatory compliance status"
          },
          "parentCompany": {
            "type": "string",
            "description": "ID of the parent company managing this SPV"
          },
          "formation": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Formation date of the SPV"
              },
              "state": {
                "type": "string",
                "description": "State where the SPV was formed"
              },
              "ein": {
                "type": "string",
                "description": "Employer Identification Number"
              }
            }
          },
          "fundingGoal": {
            "type": "number",
            "format": "float",
            "description": "Target funding amount"
          },
          "currentFunding": {
            "type": "number",
            "format": "float",
            "description": "Current amount raised"
          },
          "investors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of investors in this SPV"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of assets owned by this SPV"
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of documents related to this SPV"
          }
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication is required to access this resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "The request contains invalid parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "An internal server error occurred",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login a user",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Authenticate a user with email and password"
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "description": "Email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Create a new user account with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "name"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password"
                  },
                  "name": {
                    "type": "string",
                    "description": "User's full name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/spvs": {
      "get": {
        "tags": [
          "SPV Management"
        ],
        "summary": "Get all SPVs",
        "operationId": "getSPVs",
        "responses": {
          "200": {
            "description": "List of SPVs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SPV"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "description": "Retrieve a list of all SPVs the user has access to",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Maximum number of records to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          }
        ]
      },
      "post": {
        "tags": [
          "SPV Management"
        ],
        "summary": "Create a new SPV",
        "description": "Create a new Special Purpose Vehicle record",
        "operationId": "createSPV",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SPVInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SPV created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SPV"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/documents": {
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "Get all documents",
        "operationId": "getDocuments",
        "responses": {
          "200": {
            "description": "List of documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Document"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "description": "Retrieve a list of all documents the user has access to",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Maximum number of records to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "contract",
                "report",
                "legal",
                "tax",
                "other"
              ]
            },
            "description": "Filter by document type"
          }
        ]
      },
      "post": {
        "tags": [
          "Document Management"
        ],
        "summary": "Upload a new document",
        "description": "Upload a new document with metadata",
        "operationId": "uploadDocument",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file",
                  "name",
                  "type"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Document file to upload"
                  },
                  "name": {
                    "type": "string",
                    "description": "Document name"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "contract",
                      "report",
                      "legal",
                      "tax",
                      "other"
                    ],
                    "description": "Document type"
                  },
                  "description": {
                    "type": "string",
                    "description": "Document description"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags to categorize the document"
                  },
                  "entityId": {
                    "type": "string",
                    "description": "ID of the related entity (e.g., company, SPV, investor)"
                  },
                  "entityType": {
                    "type": "string",
                    "enum": [
                      "company",
                      "spv",
                      "investor",
                      "employee",
                      "other"
                    ],
                    "description": "Type of the related entity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "openapi": {
      "0": "3",
      "1": ".",
      "2": "0",
      "3": ".",
      "4": "0"
    },
    "info": {
      "title": "OpenCap SPV API",
      "description": "Special Purpose Vehicle Management Endpoints",
      "version": "1.0.0"
    },
    "/auth/oauth-login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "OAuth login",
        "description": "Authenticate a user with OAuth provider token",
        "operationId": "oauthLogin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "idToken",
                  "provider"
                ],
                "properties": {
                  "idToken": {
                    "type": "string",
                    "description": "OAuth ID token"
                  },
                  "provider": {
                    "type": "string",
                    "enum": [
                      "google",
                      "github",
                      "microsoft"
                    ],
                    "description": "OAuth provider"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "isNewUser": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout user",
        "description": "Invalidate the user's current access token",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/auth/token/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh access token",
        "description": "Get a new access token using refresh token",
        "operationId": "refreshToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refreshToken"
                ],
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/profile": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get user profile",
        "description": "Get the current user's profile information",
        "operationId": "getUserProfile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update user profile",
        "description": "Update the current user's profile information",
        "operationId": "updateUserProfile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "profileImage": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/auth/password/reset-request": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request password reset",
        "description": "Request a password reset link via email",
        "operationId": "requestPasswordReset",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/auth/password/verify-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify reset token",
        "description": "Verify that a password reset token is valid",
        "operationId": "verifyResetToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset password",
        "description": "Reset a user's password using a valid token",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/documents/{id}": {
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "Get document by ID",
        "description": "Retrieve details of a specific document",
        "operationId": "getDocumentById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Document details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Document Management"
        ],
        "summary": "Update document metadata",
        "description": "Update metadata of a specific document",
        "operationId": "updateDocument",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Document ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Document name"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "contract",
                      "report",
                      "legal",
                      "tax",
                      "other"
                    ],
                    "description": "Document type"
                  },
                  "description": {
                    "type": "string",
                    "description": "Document description"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags to categorize the document"
                  },
                  "entityId": {
                    "type": "string",
                    "description": "ID of the related entity"
                  },
                  "entityType": {
                    "type": "string",
                    "enum": [
                      "company",
                      "spv",
                      "investor",
                      "employee",
                      "other"
                    ],
                    "description": "Type of the related entity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Document Management"
        ],
        "summary": "Delete document",
        "description": "Delete a specific document",
        "operationId": "deleteDocument",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/documents/{id}/download": {
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "Download document",
        "description": "Download the document file",
        "operationId": "downloadDocument",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Document file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/document-embeddings": {
      "post": {
        "tags": [
          "Document Management"
        ],
        "summary": "Generate document embeddings",
        "description": "Generate vector embeddings for a document to enable semantic search",
        "operationId": "generateDocumentEmbeddings",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "documentId"
                ],
                "properties": {
                  "documentId": {
                    "type": "string",
                    "description": "ID of the document to generate embeddings for"
                  },
                  "forceRegenerate": {
                    "type": "boolean",
                    "default": false,
                    "description": "Force regeneration of existing embeddings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Embeddings generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "documentId": {
                      "type": "string"
                    },
                    "embeddingCount": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/document-embeddings/search": {
      "post": {
        "tags": [
          "Document Management"
        ],
        "summary": "Semantic search across documents",
        "description": "Search for documents using semantic similarity",
        "operationId": "searchDocuments",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search query"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 10,
                    "description": "Maximum number of results to return"
                  },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "documentTypes": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "contract",
                            "report",
                            "legal",
                            "tax",
                            "other"
                          ]
                        },
                        "description": "Filter by document types"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by tags"
                      },
                      "entityTypes": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "company",
                            "spv",
                            "investor",
                            "employee",
                            "other"
                          ]
                        },
                        "description": "Filter by entity types"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "document": {
                            "$ref": "#/components/schemas/Document"
                          },
                          "score": {
                            "type": "number",
                            "format": "float",
                            "description": "Similarity score"
                          },
                          "relevantText": {
                            "type": "string",
                            "description": "Relevant text excerpt"
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of results"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/spvs/{id}": {
      "get": {
        "tags": [
          "SPV Management"
        ],
        "summary": "Get SPV by ID",
        "description": "Retrieve details of a specific SPV by ID",
        "operationId": "getSPVById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "SPV ID"
          }
        ],
        "responses": {
          "200": {
            "description": "SPV details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SPV"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "SPV Management"
        ],
        "summary": "Update SPV",
        "description": "Update details of a specific SPV",
        "operationId": "updateSPV",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "SPV ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SPVInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SPV updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SPV"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "SPV Management"
        ],
        "summary": "Delete SPV",
        "description": "Delete a specific SPV by ID",
        "operationId": "deleteSPV",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "SPV ID"
          }
        ],
        "responses": {
          "200": {
            "description": "SPV deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/spvs/status/{status}": {
      "get": {
        "tags": [
          "SPV Management"
        ],
        "summary": "Get SPVs by status",
        "description": "Retrieve SPVs filtered by their operational status",
        "operationId": "getSPVsByStatus",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Active",
                "Pending",
                "Closed"
              ]
            },
            "description": "SPV status"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Maximum number of records to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of SPVs with the specified status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SPV"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/spvs/compliance/{status}": {
      "get": {
        "tags": [
          "SPV Management"
        ],
        "summary": "Get SPVs by compliance status",
        "description": "Retrieve SPVs filtered by their compliance status",
        "operationId": "getSPVsByComplianceStatus",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Compliant",
                "NonCompliant",
                "PendingReview"
              ]
            },
            "description": "Compliance status"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Maximum number of records to return"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of SPVs with the specified compliance status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SPV"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "tags": []
}