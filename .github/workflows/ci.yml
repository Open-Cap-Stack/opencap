name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:5.0 # Match our development MongoDB version
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: opencap
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: opencap_test
        options: >-
          --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: opencap_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      MONGO_URI: mongodb://opencap:password123@localhost:27017/opencap_test?authSource=admin
      DATABASE_URL: postgres://postgres:password@localhost:5432/opencap_test
      PORT: 3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create MongoDB user
        run: |
          mongosh --host localhost --eval 'db.getSiblingDB("admin").createUser({user: "opencap", pwd: "password123", roles: [{role: "root", db: "admin"}]})'
          mongosh --host localhost --eval 'db.getSiblingDB("opencap_test").createCollection("financialReport")'
          mongosh --host localhost --eval 'db.getSiblingDB("opencap_test").createCollection("users")'
          mongosh --host localhost --eval 'db.getSiblingDB("opencap_test").createCollection("documents")'

      - name: Wait for databases to be ready
        run: |
          echo "Waiting for MongoDB and PostgreSQL to be ready..."
          sleep 5

      - name: Run tests
        run: npm run test:ci

      - name: Generate Coverage Report
        run: npm run coverage:report
        if: success() || failure()  # Run even if tests fail to get coverage data

      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v3
        if: success() || failure()  # Run even if tests fail
        with:
          name: test-coverage-report
          path: |
            coverage/
            docs/test-coverage-report.md
          retention-days: 14

      - name: Build Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t opencap/api:${{ github.sha }} .
          # Also tag as latest for convenience
          docker tag opencap/api:${{ github.sha }} opencap/api:latest

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          # Verify if login worked by checking if we're logged in
          if docker info | grep -q "Username"; then
            echo "Logged into Docker Hub, pushing images..."
            docker push opencap/api:${{ github.sha }}
            docker push opencap/api:latest
            echo "Successfully pushed Docker images"
          else
            echo "Docker login verification failed, skipping push"
            exit 1
          fi
